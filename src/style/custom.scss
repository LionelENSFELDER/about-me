// I_M_P_O_R_T_S
@import url('https://fonts.googleapis.com/css2?family=Roboto+Condensed&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Libre+Barcode+128+Text&family=Press+Start+2P&display=swap');

$main: #6fffe9;
$main-translucent: #6fffe941;
$second: #70c3c2;
$grey: #2B2B2B;
$white: #FFFFFF;
$dark: #202020;
$darkTranslucent: #202020;

// B_A_S_E
html {
    scroll-behavior: smooth;
}

body {
    font-family: "Roboto Condensed";
    color: $white;
    background-color: $dark;
}

footer {
    font-family: "Libre Barcode 128 Text";
}

h1 {
    font-family: "Press Start 2P";
    font-size: 2rem;
    font-weight: bold;
}

a {
    color: inherit;

    &:hover {
        text-decoration: none;
        color: inherit;
    }
}
// B_A_C_K_G_R_O_U_N_D_S
.bg-grey{
    background-color: $grey;
}
.bg-dark{
    background-color: $dark !important;
}
.bg-main{
    background-color: $main;
}

// F_O_N_T  C_O_L_O_R
.font-main {
    color: $main;
}

.font-white {
    color: $white;
}

// F_O_N_T  W_E_I_G_H_T
.custom-date, .custom-url, .custom-tags {
    font-weight: 200;
    font-size: 0.8rem;
    font-style: italic;
}

.font-08 {
    font-size: 0.8rem;
}

.font-15 {
    font-size: 1.5rem;
}

.font-20 {
    font-size: 2rem;
}

.font-30 {
    font-size: 3rem;
}

// B_U_T_T_O_N_S
*:focus {
    outline:0 !important;
    box-shadow: none !important;
}

.btn-main {
    color: $main;
    border: 1px solid $main;
    background-color: transparent;
    transition: background-color 1s;

    &:hover {
        color: $second;
        background-color: $main;
        border: 1px solid transparent;
    }
}

.btn-main-light {
    color: $main;
    border: 1px solid transparent;
    background-color: transparent;
    transition: background-color 1s;

    &:hover {
        color: $second;
        background-color: $main;
    }
}

// S_T_A_C_K  C_A_R_D
.stack-card {
    background-color: transparent;
    border: none;
    text-align: center;
    color: white;
    transition: background-color 1s, box-shadow 2s;
    &:hover {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        background-color: $darkTranslucent;
    }
    &:hover i {
        color: $main;
    }
}

// W_O_R_K
.workCard{
    h1 {
        font-size: 2em;
        font-weight: bold;
        font-family: "Roboto Condensed";
        transition: opacity 2s;
    }
    a {
        color: $main;
    }
}

// C_A_R_O_U_S_E_L
#myCarousel {
    margin-left: 50px;
    margin-right: 50px;
}

.carousel-control-prev, .carousel-control-next {
    margin-left: -0px;
}

//T_E_S_T_I_M_O_N_I_A_L
.testimonial {
    background-image: url("../../assets/img/main.gif");
    height: 100%;
    background-attachment: fixed;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    a i:hover {
        background-color: $white;
        color: $main;
    }
    img.rounded-circle {
        border: 4px solid;
    }
}
.testimonial-item-link {
    color: $main;
}

/* C_O_N_T_A_C_T  I_T_E_M */
.contactitem-card {
    background-color: transparent;
    transition: color 2s;
    &:hover {
        background-color: $darkTranslucent;
    }
    i{
        transition: color 1s;
    }
    &:hover i {
        color: $main;
    }
}

// G_L_I_T_C_H  A_N_I_M_A_T_I_O_N


/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.glitch {
    position: relative;
    // letter-spacing: .5em;
    /* Animation provies a slight random skew. Check bottom of doc
    for more information on how to random skew. */
    animation: glitch-skew 1s infinite linear alternate-reverse;

    // Creates a copy before our text. 
    &::before {
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 2px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -2px 0 #ff00c1;
        /* Creates an initial clip for our glitch. This works in
    a typical top,right,bottom,left fashion and creates a mask
    to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 0);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
    with an alternating animation to keep things fresh. */
        animation: glitch-anim 5s infinite linear alternate-reverse;
    }

    // Creates a copy after our text. Note comments from ::before.
    &::after {
        @include glitchCopy;
        left: -2px;
        text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
        animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
}

/* Creates an animation with 20 steaps. For each step, it calculates 
a percentage for the specific step. It then generates a random clip
box to be used for the random glitch effect. Also adds a very subtle
skew to change the 'thickness' of the glitch.*/
@keyframes glitch-anim {
    $steps: 20;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
    $steps: 20;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            clip: rect(random(100)+px, 9999px, random(100)+px, 0);
            transform: skew((random(100) / 100) + deg);
        }
    }
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
    $steps: 10;

    @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
            transform: skew((random(10) - 5) + deg);
        }
    }
}